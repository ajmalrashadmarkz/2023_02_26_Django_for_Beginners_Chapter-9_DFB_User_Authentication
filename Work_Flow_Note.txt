____________________  1. Migration & Register the App   ____________________
    - INSTALLED_APPS = [
            "django.contrib.admin",
            "django.contrib.auth",
            "django.contrib.contenttypes",
            "django.contrib.sessions",
            "django.contrib.messages",
            "django.contrib.staticfiles",
            # Local
            "blog.apps.BlogConfig"
        ]

____________________  2. Test HttpResponse  ____________________
    - from django.http import HttpResponse
    # Create your views here.

    def test(request):
        return HttpResponse("<h1> TEST VIEW - OK </h1>")


    - from django.urls import path
        from . import views
        # Create your tests here.
        urlpatterns = [
            path("test",views.test,name = "test"),
            # name is very important for template seme name is given in base.html
            path("post/",views.BlogListView.as_view(),name = "post_list"),
            ]

    - urlpatterns = [
            path("admin/", admin.site.urls),
            path("blog/",include("blog.urls")),
        ]

____________________  3. Create Super User  ____________________
    - 

____________________  4. Create Model & makemigration ____________________
    -   from django.db import models
        from django.urls import reverse


        # Create your models here.
        class Post(models.Model):
            title = models.CharField(max_length=200)
            author = models.ForeignKey(
                "auth.User",
                on_delete=models.CASCADE,
            )
            body = models.TextField()

            def __str__(self):
                return self.title

            def get_absolute_url(self):
                return reverse("post_details",kwargs={"pk": self.pk})

    
________________  5. Site Registration  ____________________
    - from django.contrib import admin
        from .models import Post
        # Register your models here.

        admin.site.register(Post)

____________________  6. Setup Template view ____________________
    - blog\templates\blog\post_list.html
        <html>
            <head>
                <title>Post List View </title>
            </head>
            <body>
                {% for post in post_list %}
                <div class="post-entry">
                <h2><a href="">{{ post.title }}</a></h2>
                <p>{{ post.body }}</p>
                </div>
                {% endfor %}
            </body>
        </html>

    -   from django.views.generic import ListView
        class BlogListView(ListView):
            model = Post


    - blog\templates\base.html
        <html>
        <head>
        <title>Django blog</title>
        </head>
        <body>
        <header>

        <h1><a href="{% url 'post_list' %}">Django blog</a></h1>
        </header>
        <div>
        {% block content %}
        {% endblock content %}
        </div>
        </body>
        </html>

____________________  7. Setup Static file  ____________________
    - mkdir static
    - STATIC_URL = "/static/"
    - STATICFILES_DIRS = [BASE_DIR / "static"]

    -# load static is very important

        {% load static %}


        <html>
        <head>
        <title>Django blog</title>
        <link rel="stylesheet" href="{% static 'css/base.css' %}">
        </head>
        ...


____________________  8. Setup Detail view  ____________________
    - blog/model.py [post_detail->detail view html page ]
                    [value of pk pass to this webpage]
        def get_absolute_url(self):
        return reverse("post_detail",kwargs={"pk": self.pk})

    - blog\templates\post_list.html [hyper link to detail view]
        <h2><a href="{% url 'post_detail' post.pk %}">{{ post.title }}</a></h2>

    - blog/views.py [Setup Detail view]
        from django.views.generic import ListView, DetailView

        class BlogDetailView(DetailView):
            model = Post

    - blog/urls.py []
        path("post/<int:pk>/",views.BlogDetailView.as_view(),name = "post_detail"),

    - blog\templates\post_detail.html
        {% extends "base.html" %}
        {% block content %}
        <div class="post-entry">
        <h2>{{ post.title }}</h2>
        <p>{{ post.body }}</p>
        </div>
        {% endblock content %}


____________________  9. Setup Create view  ____________________
    -  blog/view.py
        from django.views.generic import ListView, DetailView, CreateView
        class BlogCreateView(CreateView):
        model = Post
        template_name = "blog/post_create.html"
        fields = ["title", "author","body"]

    - blog/urls.py
        path("post/new/",views.BlogCreateView.as_view(),name = "post_create"),

    - blog\base.html
         <div class="nav-right">
            <a href="{% url 'post_create' %}">+ New Blog Post</a>
         </div>

    - blog\templates\base.html
            {% extends "base.html" %}
                {% block content %}
                <h1>New post</h1>
                <form action="" method="post">{% csrf_token %}
                {{ form.as_p }}
                <input type="submit" value="Save">
                </form>
                {% endblock content %}

    ...
____________________  10. Setup Update view  ____________________
    -  blog/view.py
        from django.views.generic import ListView, DetailView, CreateView, UpdateView

        class BlogUpdateView(UpdateView):
        model = Post
        template_name = "blog/post_update.html"
        fields = ["title","body"]

    - blog/urls.py
        path("post/<int:pk>/edit/",views.BlogUpdateView.as_view(),name = "post_update"),


    - blog\templates\blog\post_detail.html
        <a href="{% url 'post_update' post.pk %}">+ Edit Blog Post</a>


    - blog\templates\post_update.html
        {% extends "base.html" %}
        {% block content %}
        <h1>Edit post</h1>
        <form action="" method="post">{% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="Update">
        </form>
        {% endblock content %}

    ...

____________________  10. Setup Delete view  ____________________
    - blog/view.py
        from django.views.generic import ListView, DetailView, CreateView, UpdateView,DeleteView
        from django.urls import reverse_lazy

        class BlogDeleteView(DeleteView):
        model = Post
        template_name = "blog/post_delete.html"
        success_url = reverse_lazy("post_list")

    - blog/urls.py
        path("post/<int:pk>/delete/", views.BlogDeleteView.as_view(), name="post_delete"),

    -  blog\templates\blog\post_detail.html
        <p><a href="{% url 'post_delete' post.pk %}">+ Delete Blog Post</a></p>

    - blog\templates\post_delete.html
        {% extends "base.html" %}
        {% block content %}
        <h1>Delete post</h1>
        <form action="" method="post">{% csrf_token %}
        <p>Are you sure you want to delete "{{ post.title }}"?</p>
        <input type="submit" value="Confirm">
        </form>
        {% endblock content %}



    ...